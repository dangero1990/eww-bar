(include "./right-hidden-menu.yuck")
(include "./center-hidden-menu.yuck")

; -------- Variables -----------------
(defvar showCal false)
(defvar open-power false)
(defvar open-audio false)
(defvar open-hidden-menu false)

; -------- Polls & Listens ---------------------
(defpoll time 
  :interval "10s"
  "date '+%I:%M %p | %b, %d'"
)

(defpoll day
  :interval "1h"
  "date '%d'"
)

(defpoll month
  :interval "1h"
  "date '%d'"
)

(deflisten ws-data  
  :json true
  "~/.config/eww/scripts/event.sh"
)

(deflisten audio
  :json true
  "~/.config/eww/scripts/audio.sh"
)

(deflisten network
  :json true
  "~/.config/eww/scripts/network2.sh"
)

(deflisten brightness
  :json true
  "~/.config/eww/scripts/brightness.sh"
)

; -------- Windows ---------------------
(defwindow topbar
  :monitor 0
  :geometry (geometry :x "0%" :y "20px" :width "98%" :height "30px" :anchor "top center")
  :stacking "bg"
  :exclusive true
  :reserve (struts :distance "40px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (bar)
)  

; -------- Bar Widget ---------------------

(defwidget bar []
  (centerbox 
    :orientation "h" 
    :class "bar"
    (workspaces)
    (clock)
    (sidebar)
    )
)

; -------- Left Side Widgets -------

(defwidget workspaces []
  (box 
    :class "workspaces"
    :orientation "h"
    :halign "start"
    :spacing 10
    :class "workspaces"
    ;; :height "20px"   ; <- optional, only if you want it
    (for ws in {ws-data.occupied}
      (button 
        :class {ws.id == ws-data.active ? "active-ws" : "ws"}
        :onclick "hyprctl dispatch workspace ${ws.id}"
        (image
          :path {ws.id == ws-data.active
                  ? "/home/andrew/Pictures/lit-bonfire.png"
                  : "/home/andrew/Pictures/unlit-bonfire.png"}
          :image-width 16
          :image-height 36
        )
      )
    )
  )
)

; -------- Middle Widgets ----------------

(defwidget clock []
  (eventbox
    :onclick {"eww update showCal=${!showCal}"}
    :cursor "pointer"
    (box
      (label :text time)
      )
    )  
)

; -------- Right Side Widgets -------------

(defwidget sidebar []
  (box
    :orientation "h"
    :halign "end"
    :spacing 2
    :space-evenly true
    (system-tray)
    (bat)
    (network)
    (audio)
    (power)
  )
)

(defwidget audio []
  (eventbox
    :orientation "h"
    :halign "center"
    :class "audio"
    :cursor "pointer"
    :onclick {"eww update open-hidden-menu=${!open-hidden-menu} && eww update open-audio=${!open-audio}"}
    (box
      :halign "h"
      :spacing 4
      (tooltip
        (label 
          :style "color: #fff;" 
          :text {audio.default.description})
        (box 
          (label
            :visible {!audio.mute && audio.volume > 0} 
            :text " ${audio.volume}"
          )
          (label 
            :class "icon"
            :visible {audio.mute || audio.volume==0}
            :text ""
          )
        )
      )
    )
  )
)

(defwidget system-tray []
  (systray 
    :spacing 2
    :halign "start"
    :valign "center"
    :orientation "h"
    :icon-size 18
    :prepend-new true
  )
)

(defwidget power []
  (eventbox
    :cursor "pointer"
    :onclick {"eww update open-hidden-menu=${!open-hidden-menu} && eww update open-power=${!open-power}"}
    (label :text "")
  )
)

(defwidget network []
  (eventbox
    :onclick "networkmanager_dmenu"
    :cursor "pointer"
    :halign "center"
    (tooltip
      (box
        (for network in {network.wifi_list}
            (label
              :visible {network.INUSE=="*"}
              :text "${network.SSID} ${network.SIGNAL}%"
            )
        )
      )
      (box
        (for connection in {network.active_connection}
          (box
            (label
              :visible {connection.type=="wifi"&&connection.state=="connected"}
              :text ""
              :class "icon"
            )
            (label
              :visible {connection.type=="ethernet"&&connection.state=="connected"}
              :text ""
              :class "icon"
            )
          )
        )
      )
    )
  )
)

(defwidget bat []
  (box
    ; 76 - 100
    (label 
      :visible {EWW_BATTERY.BAT1.capacity>75&&EWW_BATTERY.BAT1.capacity<=100&&EWW_BATTERY.BAT1.status=="Discharging"}
      :text "${EWW_BATTERY.BAT1.capacity}% "
    )
    ; 51 - 75
    (label 
      :visible {EWW_BATTERY.BAT1.capacity>50&&EWW_BATTERY.BAT1.capacity<=75&&EWW_BATTERY.BAT1.status=="Discharging"}
      :text "${EWW_BATTERY.BAT1.capacity}% "
    )
    ; 26 - 50
    (label 
      :visible {EWW_BATTERY.BAT1.capacity>25&&EWW_BATTERY.BAT1.capacity<=50&&EWW_BATTERY.BAT1.status=="Discharging"}
      :text "${EWW_BATTERY.BAT1.capacity}% "
    )
    ; 11 - 25
    (label 
      :visible {EWW_BATTERY.BAT1.capacity>10&&EWW_BATTERY.BAT1.capacity<=25&&EWW_BATTERY.BAT1.status=="Discharging"}
      :text "${EWW_BATTERY.BAT1.capacity}% "
    )
    ; 0 - 10
    (label 
      :visible {EWW_BATTERY.BAT1.capacity>0&&EWW_BATTERY.BAT1.capacity<=10&&EWW_BATTERY.BAT1.status=="Discharging"}
      :text "${EWW_BATTERY.BAT1.capacity}% "
      :style "color: rgba(179, 71, 45, 1)"
    )
    ; Charging
    (label 
      :visible {EWW_BATTERY.BAT1.status=="Charging"}
      :text "${EWW_BATTERY.BAT1.capacity}% "
    )
    ; Fully Charged
    (label 
      :visible {EWW_BATTERY.BAT1.status=="Full"}
      :text "${EWW_BATTERY.BAT1.capacity}% "
    )
  )
)

